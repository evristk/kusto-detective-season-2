// Ingests data for this kusto detective case
.execute database script <|
// It takes about 1min to script to complete loading the data
.set-or-replace StolenCars <|
datatable(VIN:string)
   ['LG232761G','SA732295L','MW406687Q','PR843817F','EL438126P',
    'GA871473A','IR177866Y','LP489241B','AS483204L','DO255727O',
    'BV850698T','YZ347238C','NJ586451R','VB724416I','SI241398E',
    'IN149152E','PV340883B','CK552050Z','ZJ786806D','KU388194T']
.create-merge table CarsTraffic(Timestamp:datetime, VIN:string, Ave:int, Street:int)
.ingest async into table CarsTraffic(@'https://kustodetectiveagency.blob.core.windows.net/kda2c3cartraffic/log_00000.csv.gz')
.ingest async into table CarsTraffic(@'https://kustodetectiveagency.blob.core.windows.net/kda2c3cartraffic/log_00001.csv.gz')
.ingest into table CarsTraffic(@'https://kustodetectiveagency.blob.core.windows.net/kda2c3cartraffic/log_00002.csv.gz')

// The Kusto Detective case S2C3 was released on June 17th, 2023. Since the
// first solvers will receive a prize, I will not post the solution within
// the first week. The solution will be posted on June 24th, 2023

// However, here are some useful kusto queries:

// First sighting of each car
CarsTraffic
| summarize arg_min(Timestamp, Street, Ave) by VIN
| extend firstTimestamp=bin(Timestamp,10m) // we create time windows of 10min

// Count number of cars that were last recorded on each location
CarsTraffic
| summarize arg_max(Timestamp, *) by VIN
| summarize TotalLastReported=count() by Street, Ave
| order by TotalLastReported desc